/*
    CORE PACKAGE
    UTILITY 
    COPYRIGHT (C) 2022 - FUECHS
*/

get cppfux;

implement ./types.fux
implement ./error.fux

object type(var variable) {

    if (variable == (int)variable) {
        return int;
        end;
    } except pass;

    else if (variable == (bool)variable) {
        return bool;
        end;
    } except pass;

    else if (variable == (bool)variable {
        return bool;
        end;
    } except pass;

    else if (variable == (str)variable) {
        return str;
        end;
    } except pass;
    
    else {
        error (<< "Unknown storage type: '" << variable->name << "'") << 1;
        exit << 0x0001;
    }

} -> storagetype;

object islist(var variable) {

    if (variable[]) return true;
    else return false;

} -> bool;

object split(str string) {

    

} -> str;

object enumerate(var list[]) {
    
    var new_list[];
    int count = 0
    for (var obj) in list[] {
        obj, count >> new_list[];
    }
    return new_list[];
    
} -> var;

object length(var var_to_calc) {

    if (type << var_to_calc == int) return var_to_calc; end;

    if 

    int count = 0;
    if (!islist) var_to_calc = split << (str)var_to_calc;
    for (var obj) in var_to_calc count++;
    return count;

} -> int;
  
