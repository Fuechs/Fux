package core;

#get <fux_std.h>

/* Buffer for output */
object _buffer[] -> str;

object *_flush() -> void {
    for (obj -> str) in (_buffer[]) {
        _stdout(obj);
    }
}

object *endl() -> char {
    @as_call {
        _buffer << '\n';
        _flush();
    } 
    @as_ref {
        return '\n'
    }
}

object *cout(messages[] -> universal) -> void {
    object _endl_flush -> bool;
    for (message -> universal) in (messages[]) {
        if (message == endl) buffer << '\n'; _endl_flush = true;
        _buffer << (str)message;
    }
    _endl_flush ? _flush();
}

object *cin(messages[] -> universal) -> str {
    for (message -> universal) in (messages[]) {
        if (message == endl) buffer << '\n'; // ignore flush
        else _buffer << (str)message;
    }
    _flush(); // flush buffer before input
    return _stdin(str);
}

object *getchar() -> char {
    _flush();
    return _stdin(char);
} 

object *getint() -> double {
    _flush();
    return _stdin(double);
} 