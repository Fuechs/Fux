package core;

get string;

io {

    class IOBuffer {
        intern buffer: str[256];

        #IOBuffer() { delete &buffer; }
        
        operator<<(this -> IOBuffer, val: str) -> IOBuffer {
            this.buffer[] << val;
            this.flush(false);
            return this;
        }

        operator>>(val: str, this -> IOBuffer) -> IOBuffer {
            val >> this.buffer[];
            this.flush(false);
            return this;
        }

        flush(final bool force = true): void {
            if (!buffer.full() && !force)
                return;

            for (obj: str in buffer)
                puts obj;
            buffer.clear();
        }
    }

    safe buffer: IOBuffer;

    put(args: var, ...): void {
        for (obj: var in args)
            buffer << (str) obj;
    }

    putln(args: var, ...): void {
        put(args);
        buffer << "\n";
        buffer.flush();
    }

    putf(data: str, args: var, ...): void {
        string.format(data, args);
        put(data);
    }

    getln(args: var, ...): str {
        put(args);
        buffer.flush();
        return __stdin__(0, '\n');
    }

    getch(args: var, ...): c8 {
        put(args);
        buffer.flush();
        return __stdin__(1);
    }

    getint(args: var, ...): i64 {
        put(args);
        buffer.flush();
        return __stdin__(2);
    }

    clear(): void {
        buffer.flush();
        puts "\033[2J";
    }

    err(code: i64, args: var, ...): void {
        put(args);
        buffer.flush();
        if (code != 0)
            exit code;
    }
    
}