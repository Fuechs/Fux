package core;

string {

    isdigit(data: c8): bool {
        return __istype__(data, digit);
    }
    
    isdigit(data: str): bool {
        if (data[i] == ('+' || '-'))
            data.pop();

        for (char: c8 in data)
            if (!isdigit(char))
                return false;
        return true;
    }

    isalpha(data: c8): bool {
        return __istype__(data, alpha);
    }
    
    isalpha(data: str): bool {
        for (char: c8 in data)
            if (!isalpha(char))
                return false;
        return true;
    }

    replace(data: str, from: str, to: str, amount: u64 = 1): str;

    replace(data -> str, from: str, to: str, amount: u64 = 1): void {
        data = replace(data, from, to, amount);
    }

    format(data: str, args: var, ...): str {
        i: u64; j: u64; buf: str;
        for (i: u64; ?data[i]; i++) {
            if (data[i] == '%') {
                ++i;
                switch (data[i]) {
                    case ('%')
                        buf << '%';
                        break;
                    case ('c')
                        buf << (c16) args[j++];
                        break;
                    case ('i')
                        buf += (str) (i64) args[j++];
                        break;
                    case ('u')
                        buf += (str) (u64) args[j++];
                        break;
                    case ('f')
                        buf += (str) (f64) args[j++];
                        break;
                    default
                        // throw error
                        break;
                }
            } else
                buf << data[i];
        }
        return data;
    }

    format(data -> str, args: var, ...): void {
        data = format(data, args);
    }

}