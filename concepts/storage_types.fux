// Initial value of all variables: 0 or null or 0xFF        (char)
//                                           |  0xFFFF      (wchar)
//                                           |  0x0000FFFF  (dchar)

// number thingy

binary_ -> binary; // just binary; e.g. 11 = 3
int_ -> int; // 32-bit integer
real_ -> real; // 64-bit integer

// int->size = 4; Length in bytes

float_ -> float; // 32-bit floating point integer
double_ -> double; // 64-bit floating point integer

// increment or decrement
int_++;
int_--;

// text thingy

char_ -> char; // UTF-8 code unit (single-character?)
wchar_ -> wchar; // UTF-16 code unit
dchar_ -> dchar; // UTF-32 code unit; don't use it please...
fixed_size -> char[5] = "fixed"; // char with fixed size of 5
//            char[N]          ;
//                 N = size
// increment or decrement fixed size
fixed_size++;
fixed_size--;


str_ -> str; // string, just a string 
str_ = "Hello World!";

// boolean thingy

bool_ -> bool; // true or false and null

// lists

universal_[] -> universal; // universal lists can hold any type of value
universal_[] << 1 << 'a' << false;

myVar -> universal; // Can hold any type
myVar = -43434.34;  // float
myVar = '1';        // char
myVar = null;       // nothing

// basic defenition

object          // (optional)
myVar           // name
->              // points to type
char            // type (char)
[12]            // [fixed size] (12) 
===             // constant ('==='value... or '*'name...), normal would be '='
"Hello World!"  // value
;               // end of definition

// null

typedef null (void)0; // converting zero to void would be... nothing-er than void?

// enums; structs; typedef

typedef enum {
    ONLINE, OFFLINE
} State;

struct struct_ {
    int id;
    State status;
    str name;
}

typedef struct_ Something;

Something foo;
foo->id = 0;
foo->status = OFFLINE;
foo->name = "bar";

// pointer

int a;
int& b = &a; // b points to the adress of a
// so b++ is a++